1. 封包（Packetization）
定义：发送方将应用层的数据按照协议规则分割成适合网络传输的数据块（如TCP段或UDP数据报）。

作用：

适应网络的MTU（最大传输单元），避免数据过大导致分片。

添加协议头（如TCP头）包含序列号、端口等信息。

示例：应用层发送2000字节数据，TCP层可能拆分为两个1000字节的包（假设MTU=1500）。

2. 拆包（Unpacking）
定义：接收方从网络层接收数据后，根据协议头信息重组为原始应用层数据。

关键点：

需处理数据顺序（TCP序列号）和完整性校验。

可能需等待多个包到达后才能组装（如TCP流式数据）。

示例：接收两个1000字节的TCP段后，重组为2000字节的应用数据。

3. 粘包（Packet Sticking）
定义：多个应用层数据包在传输层被合并为一个TCP段发送，导致接收方难以区分原始消息边界。

原因：

Nagle算法：TCP默认合并小包以减少网络开销。

发送方快速连续发送小数据包（如心跳包+业务数据）。
粘包解决方案
固定长度协议

每个包固定大小（如100字节），不足部分填充。

缺点：浪费带宽。

分隔符协议

用特殊字符（如\n、\0）标记包结束。

需转义分隔符（类似HTTP的\r\n\r\n）。

长度前缀协议（推荐）

在数据头部声明包长度（如4字节int表示长度）。

接收方先读长度，再按长度截取数据。