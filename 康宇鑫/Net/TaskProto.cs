// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TaskProto.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace GameMessage {

  #region Enums
  /// <summary>
  ////任务进度的状态类型
  /// </summary>
  public enum TaskCompleteState {
    Wj = 0,
    Wc = 1,
    Jxz = 2,
  }

  /// <summary>
  ////任务进度的结果类型
  /// </summary>
  public enum Result {
    Cg = 0,
    Sb1 = 1,
    Sb2 = 2,
  }

  #endregion

  #region Messages
  /// <summary>
  ////客户端向服务器请求当前进行任务
  /// </summary>
  public sealed class C2S_Task_CurrComplete : pb::IMessage {
    private static readonly pb::MessageParser<C2S_Task_CurrComplete> _parser = new pb::MessageParser<C2S_Task_CurrComplete>(() => new C2S_Task_CurrComplete());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_Task_CurrComplete> Parser { get { return _parser; } }

    /// <summary>Field number for the "playerId" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private int playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ////服务器向客户端回馈当前进行任务
  /// </summary>
  public sealed class S2C_Task_CurrComplete : pb::IMessage {
    private static readonly pb::MessageParser<S2C_Task_CurrComplete> _parser = new pb::MessageParser<S2C_Task_CurrComplete>(() => new S2C_Task_CurrComplete());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_Task_CurrComplete> Parser { get { return _parser; } }

    /// <summary>Field number for the "taskId" field.</summary>
    public const int TaskIdFieldNumber = 1;
    private int taskId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TaskId {
      get { return taskId_; }
      set {
        taskId_ = value;
      }
    }

    /// <summary>Field number for the "zxTaskList" field.</summary>
    public const int ZxTaskListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::GameMessage.zxTask> _repeated_zxTaskList_codec
        = pb::FieldCodec.ForMessage(18, global::GameMessage.zxTask.Parser);
    private readonly pbc::RepeatedField<global::GameMessage.zxTask> zxTaskList_ = new pbc::RepeatedField<global::GameMessage.zxTask>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameMessage.zxTask> ZxTaskList {
      get { return zxTaskList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TaskId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TaskId);
      }
      zxTaskList_.WriteTo(output, _repeated_zxTaskList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TaskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TaskId);
      }
      size += zxTaskList_.CalculateSize(_repeated_zxTaskList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TaskId = input.ReadInt32();
            break;
          }
          case 18: {
            zxTaskList_.AddEntriesFrom(input, _repeated_zxTaskList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class zxTask : pb::IMessage {
    private static readonly pb::MessageParser<zxTask> _parser = new pb::MessageParser<zxTask>(() => new zxTask());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<zxTask> Parser { get { return _parser; } }

    /// <summary>Field number for the "taskID" field.</summary>
    public const int TaskIDFieldNumber = 1;
    private int taskID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TaskID {
      get { return taskID_; }
      set {
        taskID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TaskID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TaskID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TaskID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TaskID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TaskID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ////客户端向服务器请求当前任务进度
  /// </summary>
  public sealed class C2S_Task_CompleteState : pb::IMessage {
    private static readonly pb::MessageParser<C2S_Task_CompleteState> _parser = new pb::MessageParser<C2S_Task_CompleteState>(() => new C2S_Task_CompleteState());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_Task_CompleteState> Parser { get { return _parser; } }

    /// <summary>Field number for the "playerId" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private int playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "taskId" field.</summary>
    public const int TaskIdFieldNumber = 2;
    private int taskId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TaskId {
      get { return taskId_; }
      set {
        taskId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (TaskId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TaskId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
      }
      if (TaskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TaskId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 16: {
            TaskId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ////服务器向客户端回馈当前任务进度
  /// </summary>
  public sealed class S2C_Task_CompleteState : pb::IMessage {
    private static readonly pb::MessageParser<S2C_Task_CompleteState> _parser = new pb::MessageParser<S2C_Task_CompleteState>(() => new S2C_Task_CompleteState());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_Task_CompleteState> Parser { get { return _parser; } }

    /// <summary>Field number for the "r" field.</summary>
    public const int RFieldNumber = 1;
    private global::GameMessage.Result r_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameMessage.Result R {
      get { return r_; }
      set {
        r_ = value;
      }
    }

    /// <summary>Field number for the "currCount" field.</summary>
    public const int CurrCountFieldNumber = 2;
    private int currCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrCount {
      get { return currCount_; }
      set {
        currCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (R != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) R);
      }
      if (CurrCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CurrCount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (R != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) R);
      }
      if (CurrCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrCount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            r_ = (global::GameMessage.Result) input.ReadEnum();
            break;
          }
          case 16: {
            CurrCount = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
